generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================================================
// Enums
// =================================================================

enum Role {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum RecipeStatus {
  DRAFT
  PUBLISHED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

// =================================================================
// Modelo User (sincronizado com Supabase Auth)
// =================================================================

model User {
  id        String   @id
  email     String   @unique
  name      String?
  photoUrl  String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relações ---
  recipes           Recipe[]           @relation("RecipeAuthor")
  reviews           Review[]
  favorites         Favorite[]
  shoppingLists     ShoppingList[]
  recipeViews       RecipeView[]
  pushSubscriptions PushSubscription[]
  dietaryFlags      UserDietaryFlag[]
  MealPlan          MealPlan[]
}

// =================================================================
// Modelos de Receita
// =================================================================

model Recipe {
  id          String  @id @default(cuid())
  title       String
  description String?
  authorId    String
  author      User    @relation("RecipeAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  // Metadados
  difficulty  Difficulty @default(MEDIUM)
  prepMinutes Int
  cookMinutes Int
  servings    Int
  nutrition   Json?
  videoUrl    String?
  source      String?

  // Publicação Simplificada
  status      RecipeStatus @default(DRAFT)
  publishedAt DateTime? // Preenchido quando o status muda para PUBLISHED

  // --- Relações de Conteúdo ---
  photos      RecipePhoto[]
  steps       Step[]  
  categories  RecipeCategory[]
  ingredients RecipeIngredient[]

  // --- Relações de Engajamento ---
  reviews   Review[]
  favorites Favorite[]
  views     RecipeView[]

  // --- Outras Relações ---
  shoppingListItems ShoppingListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([status, publishedAt])
  @@index([title])
}

model RecipePhoto {
  id       String @id @default(cuid())
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  url      String
  order    Int    @default(0)

  @@unique([recipeId, order])
}

model Step {
  id          String @id @default(cuid())
  recipeId    String
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  order       Int
  description String
  durationSec Int?

  @@unique([recipeId, order])
}

model Category {
  id      String           @id @default(cuid())
  name    String           @unique
  recipes RecipeCategory[]
}

model RecipeCategory {
  recipeId   String
  categoryId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([recipeId, categoryId])
}

model Ingredient {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  imageUrl         String?
  recipes          RecipeIngredient[]
  ShoppingListItem ShoppingListItem[]
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  amount       Float?
  unit         String?
  note         String?
  group        String?

  recipe     Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)

  @@id([recipeId, ingredientId])
}

model Review {
  id           String   @id @default(cuid())
  recipeId     String
  userId       String
  rating       Int
  comment      String?
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([recipeId, userId])
}

model Favorite {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@id([userId, recipeId])
}

model RecipeView {
  id        String   @id @default(cuid())
  userId    String?
  recipeId  String
  createdAt DateTime @default(now())

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
  @@index([userId])
}

model ShoppingList {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("Minha Lista de Compras")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ShoppingListItem[]
}

model ShoppingListItem {
  id           String  @id @default(cuid())
  listId       String
  ingredientId String?
  recipeId     String?
  customText   String?
  amount       Float?
  unit         String?
  isChecked    Boolean @default(false)

  list       ShoppingList @relation(fields: [listId], references: [id], onDelete: Cascade)
  ingredient Ingredient?  @relation(fields: [ingredientId], references: [id], onDelete: SetNull)
  recipe     Recipe?      @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  @@index([listId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  keys      Json
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DietaryRestriction {
  id    String            @id @default(cuid())
  name  String            @unique
  users UserDietaryFlag[]
}

model UserDietaryFlag {
  userId               String
  dietaryRestrictionId String

  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  dietaryRestriction DietaryRestriction @relation(fields: [dietaryRestrictionId], references: [id], onDelete: Cascade)

  @@id([userId, dietaryRestrictionId])
}

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("Meu Plano Semanal")
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries MealPlanEntry[]

  @@index([userId, startDate])
}

model MealPlanEntry {
  id         String   @id @default(cuid())
  mealPlanId String
  recipeId   String
  date       DateTime
  mealType   MealType

  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([mealPlanId])
}
