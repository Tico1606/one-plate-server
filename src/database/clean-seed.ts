import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Iniciando seed limpo com 2 receitas...')

  // Limpar dados existentes
  console.log('üßπ Limpando dados existentes...')
  await prisma.recipeView.deleteMany()
  await prisma.favorite.deleteMany()
  await prisma.review.deleteMany()
  await prisma.shoppingListItem.deleteMany()
  await prisma.shoppingList.deleteMany()
  await prisma.mealPlanEntry.deleteMany()
  await prisma.mealPlan.deleteMany()
  await prisma.recipeIngredient.deleteMany()
  await prisma.recipeCategory.deleteMany()
  await prisma.step.deleteMany()
  await prisma.recipePhoto.deleteMany()
  await prisma.recipe.deleteMany()
  await prisma.ingredient.deleteMany()
  await prisma.category.deleteMany()
  await prisma.user.deleteMany()

  // Criar usu√°rio admin
  console.log('üë§ Criando usu√°rio admin...')
  const adminUser = await prisma.user.create({
    data: {
      id: 'admin-user-1',
      email: 'admin@oneplate.com',
      name: 'Admin OnePlate',
      role: 'ADMIN',
    },
  })

  // Criar usu√°rio comum
  console.log('üë§ Criando usu√°rio comum...')
  const regularUser = await prisma.user.create({
    data: {
      id: 'user-1',
      email: 'usuario@oneplate.com',
      name: 'Jo√£o Silva',
      role: 'USER',
    },
  })

  // Criar categorias
  console.log('üìÇ Criando categorias...')
  const categories = await Promise.all([
    prisma.category.create({ data: { name: 'Lanche' } }),
    prisma.category.create({ data: { name: 'Almo√ßo' } }),
    prisma.category.create({ data: { name: 'Jantar' } }),
    prisma.category.create({ data: { name: 'Sobremesa' } }),
    prisma.category.create({ data: { name: 'Lanche' } }),
    prisma.category.create({ data: { name: 'Brasileira' } }),
    prisma.category.create({ data: { name: 'Italiana' } }),
  ])

  // Criar ingredientes
  console.log('ü•ï Criando ingredientes...')
  const ingredients = await Promise.all([
    prisma.ingredient.create({ data: { name: 'Farinha de trigo' } }),
    prisma.ingredient.create({ data: { name: 'A√ß√∫car' } }),
    prisma.ingredient.create({ data: { name: 'Ovos' } }),
    prisma.ingredient.create({ data: { name: 'Leite' } }),
    prisma.ingredient.create({ data: { name: 'Manteiga' } }),
    prisma.ingredient.create({ data: { name: 'Fermento em p√≥' } }),
    prisma.ingredient.create({ data: { name: 'Sal' } }),
    prisma.ingredient.create({ data: { name: 'Massa' } }),
    prisma.ingredient.create({ data: { name: 'Queijo' } }),
    prisma.ingredient.create({ data: { name: 'Azeite' } }),
    prisma.ingredient.create({ data: { name: 'Pimenta' } }),
    prisma.ingredient.create({ data: { name: 'Bacon' } }),
    prisma.ingredient.create({ data: { name: 'Parmes√£o' } }),
    prisma.ingredient.create({ data: { name: 'Leite condensado' } }),
    prisma.ingredient.create({ data: { name: 'Cacau em p√≥' } }),
    prisma.ingredient.create({ data: { name: 'Chocolate' } }),
  ])

  // Fun√ß√£o auxiliar para encontrar ingrediente por nome
  const findIngredient = (name: string): string | null => {
    const ingredient = ingredients.find((ing) => ing.name === name)
    if (!ingredient) {
      console.error(`‚ùå Ingrediente n√£o encontrado: "${name}"`)
      console.log(
        'Ingredientes dispon√≠veis:',
        ingredients.map((i) => i.name),
      )
      return null
    }
    return ingredient.id
  }

  // Fun√ß√£o auxiliar para encontrar categoria por nome
  const findCategory = (name: string) =>
    categories.find((cat) => cat.name === name)?.id || ''

  // Fun√ß√£o auxiliar para criar ingredientes de receita com valida√ß√£o
  const createRecipeIngredients = async (
    recipeId: string,
    recipeName: string,
    ingredientsData: Array<{
      ingredientId: string | null
      amount: number
      unit: string
    }>,
  ) => {
    const validIngredients = ingredientsData
      .filter(
        (
          ingredient,
        ): ingredient is { ingredientId: string; amount: number; unit: string } =>
          ingredient.ingredientId !== null,
      )
      .map((ingredient) => ({
        recipeId,
        ingredientId: ingredient.ingredientId,
        amount: ingredient.amount,
        unit: ingredient.unit,
      }))

    if (validIngredients.length === 0) {
      throw new Error(`Receita ${recipeName} deve ter pelo menos um ingrediente`)
    }

    await prisma.recipeIngredient.createMany({
      data: validIngredients,
    })
  }

  // Receita 1: P√£o de A√ß√∫car (Lanche)
  console.log('üçû Criando receita: P√£o de A√ß√∫car...')
  const paoAcucar = await prisma.recipe.create({
    data: {
      title: 'P√£o de A√ß√∫car Tradicional',
      description: 'Um p√£o doce brasileiro tradicional, perfeito para o lanche.',
      authorId: adminUser.id,
      difficulty: 'EASY',
      prepTime: 55,
      servings: 8,
      calories: 280,
      proteinGrams: 8.5,
      carbGrams: 45.2,
      fatGrams: 6.8,
      status: 'PUBLISHED',
      publishedAt: new Date(),
    },
  })

  // Adicionar ingredientes da receita
  await createRecipeIngredients(paoAcucar.id, 'P√£o de A√ß√∫car', [
    {
      ingredientId: findIngredient('Farinha de trigo'),
      amount: 500,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('A√ß√∫car'),
      amount: 100,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Ovos'),
      amount: 2,
      unit: 'unidades',
    },
    {
      ingredientId: findIngredient('Leite'),
      amount: 200,
      unit: 'ml',
    },
    {
      ingredientId: findIngredient('Manteiga'),
      amount: 50,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Fermento em p√≥'),
      amount: 10,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Sal'),
      amount: 5,
      unit: 'g',
    },
  ])

  // Adicionar passos da receita
  await prisma.step.createMany({
    data: [
      {
        recipeId: paoAcucar.id,
        order: 1,
        description: 'Pr√©-aque√ßa o forno a 180¬∞C.',
        durationSec: 0,
      },
      {
        recipeId: paoAcucar.id,
        order: 2,
        description: 'Em uma tigela, misture a farinha, o a√ß√∫car, o fermento e o sal.',
        durationSec: 300,
      },
      {
        recipeId: paoAcucar.id,
        order: 3,
        description:
          'Adicione os ovos, o leite e a manteiga derretida. Misture at√© formar uma massa homog√™nea.',
        durationSec: 600,
      },
      {
        recipeId: paoAcucar.id,
        order: 4,
        description: 'Despeje a massa em uma forma untada e enfarinhada.',
        durationSec: 120,
      },
      {
        recipeId: paoAcucar.id,
        order: 5,
        description: 'Asse por 25 minutos ou at√© dourar.',
        durationSec: 1500,
      },
    ],
  })

  // Adicionar categorias da receita
  await prisma.recipeCategory.createMany({
    data: [
      { recipeId: paoAcucar.id, categoryId: findCategory('Lanche') },
      { recipeId: paoAcucar.id, categoryId: findCategory('Brasileira') },
    ],
  })

  // Receita 2: Spaghetti √† Carbonara (Jantar)
  console.log('üçù Criando receita: Spaghetti √† Carbonara...')
  const carbonara = await prisma.recipe.create({
    data: {
      title: 'Spaghetti √† Carbonara',
      description: 'Massa italiana cremosa com bacon e queijo parmes√£o.',
      authorId: regularUser.id,
      difficulty: 'MEDIUM',
      prepTime: 35,
      servings: 4,
      calories: 450,
      proteinGrams: 18.5,
      carbGrams: 52.3,
      fatGrams: 16.8,
      status: 'PUBLISHED',
      publishedAt: new Date(),
    },
  })

  await createRecipeIngredients(carbonara.id, 'Spaghetti √† Carbonara', [
    {
      ingredientId: findIngredient('Massa'),
      amount: 400,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Ovos'),
      amount: 3,
      unit: 'unidades',
    },
    {
      ingredientId: findIngredient('Queijo'),
      amount: 100,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Azeite'),
      amount: 2,
      unit: 'colheres de sopa',
    },
    {
      ingredientId: findIngredient('Sal'),
      amount: 5,
      unit: 'g',
    },
    {
      ingredientId: findIngredient('Pimenta'),
      amount: 1,
      unit: 'pitada',
    },
  ])

  await prisma.step.createMany({
    data: [
      {
        recipeId: carbonara.id,
        order: 1,
        description: 'Cozinhe a massa conforme as instru√ß√µes da embalagem.',
        durationSec: 600,
      },
      {
        recipeId: carbonara.id,
        order: 2,
        description: 'Em uma tigela, bata os ovos com o queijo ralado.',
        durationSec: 120,
      },
      {
        recipeId: carbonara.id,
        order: 3,
        description: 'Refogue o bacon no azeite at√© ficar crocante.',
        durationSec: 300,
      },
      {
        recipeId: carbonara.id,
        order: 4,
        description: 'Misture a massa cozida com o bacon e retire do fogo.',
        durationSec: 60,
      },
      {
        recipeId: carbonara.id,
        order: 5,
        description: 'Adicione a mistura de ovos e queijo, mexendo rapidamente.',
        durationSec: 30,
      },
      {
        recipeId: carbonara.id,
        order: 6,
        description: 'Tempere com sal e pimenta. Sirva imediatamente.',
        durationSec: 0,
      },
    ],
  })

  await prisma.recipeCategory.createMany({
    data: [
      { recipeId: carbonara.id, categoryId: findCategory('Jantar') },
      { recipeId: carbonara.id, categoryId: findCategory('Italiana') },
    ],
  })

  // Criar algumas avalia√ß√µes
  console.log('‚≠ê Criando avalia√ß√µes...')
  await prisma.review.createMany({
    data: [
      {
        recipeId: paoAcucar.id,
        userId: regularUser.id,
        rating: 4,
        comment: 'Perfeito! Ficou exatamente como esperado.',
      },
      {
        recipeId: carbonara.id,
        userId: adminUser.id,
        rating: 5,
        comment: 'Delicioso! Minha fam√≠lia adorou.',
      },
    ],
  })

  // Criar algumas favoritas
  console.log('‚ù§Ô∏è Criando favoritas...')
  await prisma.favorite.createMany({
    data: [
      { userId: regularUser.id, recipeId: paoAcucar.id },
      { userId: adminUser.id, recipeId: carbonara.id },
    ],
  })

  console.log('‚úÖ Seed limpo conclu√≠do com sucesso!')
  console.log('üìä Dados criados:')
  console.log(`   - ${await prisma.user.count()} usu√°rios`)
  console.log(`   - ${await prisma.category.count()} categorias`)
  console.log(`   - ${await prisma.ingredient.count()} ingredientes`)
  console.log(`   - ${await prisma.recipe.count()} receitas`)
  console.log(`   - ${await prisma.review.count()} avalia√ß√µes`)
  console.log(`   - ${await prisma.favorite.count()} favoritas`)
}

main()
  .catch((e) => {
    console.error('‚ùå Erro durante o seed limpo:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
